setupCommand: /opt/spm/bin/spm-client-setup-conf.sh
removeCommand: /opt/spm/bin/spm-remove-application.sh

debug:
  printEvents: false
  printContainerInfo: false
  printContainerEnvironment: false
  printContainerLabels: false

spmAppTemplates:
  nginx:
    # please set SPM token via APP container ENV variable e.g. docker run -e SPM_TOKEN=token nginx 
    spmToken: null
    portInContainer: 80/tcp
    #sslPortInContainer: 443/tcp
    matchImageName: nginx
    matchContainerName: .*
    # bridge(default) or host or network name
    containerNetwork: bridge
    spmSetupTemplate: setup-nginx --token ${spmToken} --url http://${host}:${port}/nginx_status --config "/tmp/${containerName}.yml" 
    spmRemoveTemplate: stop-node-agent /tmp/${containerName}.yml

  httpd:
    # please set SPM token via APP container ENV variable e.g. docker run -e SPM_TOKEN=token httpd 
    spmToken: null
    portInContainer: 80/tcp
    #sslPortInContainer: 443/tcp
    matchImageName: httpd
    matchContainerName: .*
    # bridge(default) or host or network name
    containerNetwork: bridge
    spmSetupTemplate: setup-httpd --token ${spmToken} --url http://${host}:${port}/server-status --config "/tmp/${containerName}.yml" 
    spmRemoveTemplate: stop-node-agent /tmp/${containerName}.yml  

  mongodb:
    # please set SPM token via APP container ENV variable e.g. docker run -e SPM_TOKEN=token mongo 
    spmToken: null
    portInContainer: 27017/tcp
    #sslPortInContainer: 443/tcp
    matchImageName: mongo
    matchContainerName: .*
    # bridge(default) or host or network name
    containerNetwork: bridge
    spmSetupTemplate: setup-mongodb --token ${spmToken} --url mongodb://${host}:${port}/admin --config "/tmp/${containerName}.yml" 
    spmRemoveTemplate: stop-node-agent /tmp/${containerName}.yml  

  elasticsearch:
    # please set SPM token via APP container ENV variable e.g. docker run -e SPM_TOKEN=token elasticsearch 
    spmToken: null
    portInContainer: 9200/tcp
    #sslPortInContainer: 443/tcp
    matchImageName: elasticsearch
    matchContainerName: .*
    # bridge(default) or host or network name
    containerNetwork: bridge
    spmSetupTemplate: ${globalConfig.setupCommand} ${spmToken} es standalone jvmname:${containerName} 
    spmRemoveTemplate: bash ${globalConfig.removeCommand} ${spmToken} ${containerName}
    spmConfig:
       SPM_MONITOR_ES_NODE_HOSTPORT: http://${host}:${port}
       SPM_CONTAINER_NAME: ${containerName}

  solrCloud: 
    spmToken: null
    # JMX port is not exposed
    # portInContainer: 3000/tcp
    jmxPort: 3000
    matchImageName: solr
    matchContainerName: .*
    # bridge(default) or host or network name
    containerNetwork: bridge
    spmSetupTemplate: ${globalConfig.setupCommand} ${spmToken} solrcloud standalone jvmname:${containerName} 
    spmRemoveTemplate: ${globalConfig.removeCommand} ${spmToken} ${containerName}
    spmConfig:
       SPM_MONITOR_JMX_PARAMS: -Dspm.remote.jmx.url=${host}:${config.jmxPort}
       SPM_CONTAINER_NAME: ${containerName}
  
  kafka-broker: 
    spmToken: null
    # JMX port is not exposed
    # portInContainer: 3000/tcp
    jmxPort: 3000
    matchImageName: kafka
    matchContainerName: .*
    # bridge(default) or host or network name
    containerNetwork: bridge
    spmSetupTemplate: ${globalConfig.setupCommand} ${spmToken} kafka standalone kafka-broker jvmname:${containerName} 
    spmRemoveTemplate: ${globalConfig.removeCommand} ${spmToken} ${containerName}
    spmConfig:
       SPM_MONITOR_JMX_PARAMS: -Dspm.remote.jmx.url=${host}:${config.jmxPort}
       SPM_CONTAINER_NAME: ${containerName}
  
  kafka-producer: 
    spmToken: null
    # JMX port is not exposed
    # portInContainer: 3000/tcp
    jmxPort: 3000
    matchImageName: kafka
    matchContainerName: .*
    # bridge(default) or host or network name
    containerNetwork: bridge
    spmSetupTemplate: ${globalConfig.setupCommand} ${spmToken} kafka standalone kafka-producer jvmname:${containerName} 
    spmRemoveTemplate: ${globalConfig.removeCommand} ${spmToken} ${containerName}
    spmConfig:
       SPM_MONITOR_JMX_PARAMS: -Dspm.remote.jmx.url=${host}:${config.jmxPort}
       SPM_CONTAINER_NAME: ${containerName}
  
  kafka-consumer: 
    spmToken: null
    # JMX port is not exposed
    # portInContainer: 3000/tcp
    jmxPort: 3000
    matchImageName: kafka
    matchContainerName: .*
    # bridge(default) or host or network name
    containerNetwork: bridge
    spmSetupTemplate: ${globalConfig.setupCommand} ${spmToken} kafka standalone kafka-consumer jvmname:${containerName} 
    spmRemoveTemplate: ${globalConfig.removeCommand} ${spmToken} ${containerName}
    spmConfig:
       SPM_MONITOR_JMX_PARAMS: -Dspm.remote.jmx.url=${host}:${config.jmxPort}
       SPM_CONTAINER_NAME: ${containerName}
  
  tomcat: 
    spmToken: null
    # JMX port is not exposed
    # portInContainer: 3000/tcp
    jmxPort: 3000
    matchImageName: tomcat
    matchContainerName: .*
    # bridge(default) or host or network name
    containerNetwork: bridge
    spmSetupTemplate: ${globalConfig.setupCommand} ${spmToken} tomcat standalone jvmname:${containerName} 
    spmRemoveTemplate: ${globalConfig.removeCommand} ${spmToken} ${containerName}
    spmConfig:
       SPM_MONITOR_JMX_PARAMS: -Dspm.remote.jmx.url=${host}:${config.jmxPort}
       SPM_CONTAINER_NAME: ${containerName}

  zookeeper: 
    spmToken: null
    # JMX port is not exposed
    # portInContainer: 3000/tcp
    # Note ZK needs to open JMX port 
    jmxPort: 3000
    matchImageName: zookeeper
    matchContainerName: .*
    # bridge(default) or host or network name
    containerNetwork: bridge
    spmSetupTemplate: ${globalConfig.setupCommand} ${spmToken} zk standalone jvmname:${containerName} 
    spmRemoveTemplate: ${globalConfig.removeCommand} ${spmToken} ${containerName}
    spmConfig:
       SPM_MONITOR_JMX_PARAMS: -Dspm.remote.jmx.url=${host}:${config.jmxPort}
       SPM_CONTAINER_NAME: ${containerName}

  cassandra: 
    spmToken: null
    # JMX port is not exposed
    # portInContainer: 3000/tcp
    # Note Cassandra needs to open JMX port 
    jmxPort: 3000
    matchImageName: cassandra
    matchContainerName: .*
    # bridge(default) or host or network name
    containerNetwork: bridge
    spmSetupTemplate: ${globalConfig.setupCommand} ${spmToken} cassandra standalone jvmname:${containerName} 
    spmRemoveTemplate: ${globalConfig.removeCommand} ${spmToken} ${containerName}
    spmConfig:
       SPM_MONITOR_JMX_PARAMS: -Dspm.remote.jmx.url=${host}:${config.jmxPort}
       SPM_CONTAINER_NAME: ${containerName}

  haproxy: 
    matchImageName: /haproxy/i 
    matchContainerName: .*
    portInContainer: 1936/tcp
    containerNetwork: bridge
    spmSetupTemplate: ${globalConfig.setupCommand} ${spmToken} haproxy standalone
    spmRemoveTemplate: ${globalConfig.removeCommand} ${config.spmToken}
    spmConfig:
      SPM_CONTAINER_NAME: ${containerName}
      SPM_MONITOR_HAPROXY_STATS_URL: http://${host}:${port}/haproxy_stats;csv
      SPM_MONITOR_HAPROXY_USER: "${process.env.SPM_MONITOR_HAPROXY_USER}"
      SPM_MONITOR_HAPROXY_PASSWORD: "${process.env.SPM_MONITOR_HAPROXY_PASSWORD}"
  
  mysql:
    spmToken: null
    portInContainer: 3306/tcp
    #sslPortInContainer: 443/tcp
    matchImageName: /mysql|mariadb|percona/i
    matchContainerName: .*
    # bridge(default) or host or network name
    containerNetwork: bridge
    spmSetupTemplate: ${globalConfig.setupCommand} ${spmToken} 
    spmRemoveTemplate: ${globalConfig.removeCommand} ${config.spmToken} {containerId}
    spmConfig:
      SPM_MONITOR_MYSQL_DB_HOST_PORT: ${host}:${port}
      SPM_MONITOR_MYSQL_DB_USER: ${containerEnv.MYSQL_USER}
      SPM_MONITOR_MYSQL_DB_PASSWORD: ${containerEnv.MYSQL_PASSWORD}


